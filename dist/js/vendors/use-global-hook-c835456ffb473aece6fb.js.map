{"version":3,"sources":["webpack:///./node_modules/use-global-hook/index.js"],"names":["setState","store","newState","afterUpdateCallback","state","listeners","forEach","listener","run","useCustom","React","mapState","mapActions","originalHook","useState","Object","create","actions","useMemo","useEffect","newListener","oldState","mappedState","push","filter","useStore","initialState","initializer","bind","associateActions","associatedActions","keys","key"],"mappings":"0FAAA,SAASA,EAASC,EAAOC,EAAUC,GACjCF,EAAMG,MAAQ,IAAKH,EAAMG,SAAUF,GACnCD,EAAMI,UAAUC,QAASC,IACvBA,EAASC,IAAIP,EAAMG,SAErBD,GAAuBA,IAGzB,SAASM,EAAUR,EAAOS,EAAOC,EAAUC,GACzC,MAAO,CAAEC,GAAgBH,EAAMI,SAASC,OAAOC,OAAO,OAChDZ,EAAQO,EAAWA,EAASV,EAAMG,OAASH,EAAMG,MACjDa,EAAUP,EAAMQ,QACpB,IAAON,EAAaA,EAAWX,EAAMgB,SAAWhB,EAAMgB,QACtD,CAACL,EAAYX,EAAMgB,UAsBrB,OAnBAP,EAAMS,UAAU,KACd,MAAMC,EAAc,CAAEC,SAAU,IAYhC,OAXAD,EAAYZ,IAAMG,EACdT,IACE,MAAMoB,EAAcX,EAAST,GACzBoB,IAAgBF,EAAYC,WAC9BD,EAAYC,SAAWC,EACvBT,EAAaS,KAGjBT,EACJZ,EAAMI,UAAUkB,KAAKH,GACrBA,EAAYZ,IAAIP,EAAMG,OACf,KACLH,EAAMI,UAAYJ,EAAMI,UAAUmB,OAChCjB,GAAYA,IAAaa,KAG5B,IACI,CAAChB,EAAOa,GAwBFQ,IARE,CAACf,EAAOgB,EAAcT,EAASU,KAC9C,MAAM1B,EAAQ,CAAEG,MAAOsB,EAAcrB,UAAW,IAIhD,OAHAJ,EAAMD,SAAWA,EAAS4B,KAAK,KAAM3B,GACrCA,EAAMgB,QAhBR,SAASY,EAAiB5B,EAAOgB,GAC/B,MAAMa,EAAoB,GAS1B,OARAf,OAAOgB,KAAKd,GAASX,QAAQ0B,IACC,mBAAjBf,EAAQe,KACjBF,EAAkBE,GAAOf,EAAQe,GAAKJ,KAAK,KAAM3B,IAEvB,iBAAjBgB,EAAQe,KACjBF,EAAkBE,GAAOH,EAAiB5B,EAAOgB,EAAQe,OAGtDF,EAMSD,CAAiB5B,EAAOgB,GACpCU,GAAaA,EAAY1B,GACtBQ,EAAUmB,KAAK,KAAM3B,EAAOS","file":"js/vendors/use-global-hook-c835456ffb473aece6fb.js","sourcesContent":["function setState(store, newState, afterUpdateCallback) {\n  store.state = { ...store.state, ...newState };\n  store.listeners.forEach((listener) => {\n    listener.run(store.state);\n  });\n  afterUpdateCallback && afterUpdateCallback();\n}\n\nfunction useCustom(store, React, mapState, mapActions) {\n  const [, originalHook] = React.useState(Object.create(null));\n  const state = mapState ? mapState(store.state) : store.state;\n  const actions = React.useMemo(\n    () => (mapActions ? mapActions(store.actions) : store.actions),\n    [mapActions, store.actions]\n  );\n\n  React.useEffect(() => {\n    const newListener = { oldState: {} };\n    newListener.run = mapState\n      ? newState => {\n          const mappedState = mapState(newState);\n          if (mappedState !== newListener.oldState) {\n            newListener.oldState = mappedState;\n            originalHook(mappedState);\n          }\n        }\n      : originalHook;\n    store.listeners.push(newListener);\n    newListener.run(store.state);\n    return () => {\n      store.listeners = store.listeners.filter(\n        listener => listener !== newListener\n      );\n    };\n  }, []); // eslint-disable-line\n  return [state, actions];\n}\n\nfunction associateActions(store, actions) {\n  const associatedActions = {};\n  Object.keys(actions).forEach(key => {\n    if (typeof actions[key] === \"function\") {\n      associatedActions[key] = actions[key].bind(null, store);\n    }\n    if (typeof actions[key] === \"object\") {\n      associatedActions[key] = associateActions(store, actions[key]);\n    }\n  });\n  return associatedActions;\n}\n\nconst useStore = (React, initialState, actions, initializer) => {\n  const store = { state: initialState, listeners: [] };\n  store.setState = setState.bind(null, store);\n  store.actions = associateActions(store, actions);\n  if (initializer) initializer(store);\n  return useCustom.bind(null, store, React);\n};\n\nexport default useStore;\n"],"sourceRoot":""}