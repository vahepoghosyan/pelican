{"version":3,"sources":["webpack:///./node_modules/path-to-regexp/index.js"],"names":["module","exports","pathtoRegexp","path","keys","options","m","strict","end","flags","sensitive","extraOffset","keysOffset","length","i","name","RegExp","MATCHING_GROUP_REGEXP","exec","source","push","optional","offset","index","Array","isArray","map","value","join","replace","match","slash","format","key","capture","star","result","len","escapeCount","charAt","splice"],"mappings":"2EAIAA,EAAOC,QAuBP,SAASC,EAAaC,EAAMC,EAAMC,GAEhCD,EAAOA,GAAQ,GACf,IAOIE,EAPAC,GAFJF,EAAUA,GAAW,IAEAE,OACjBC,GAAsB,IAAhBH,EAAQG,IACdC,EAAQJ,EAAQK,UAAY,GAAK,IACjCC,EAAc,EACdC,EAAaR,EAAKS,OAClBC,EAAI,EACJC,EAAO,EAGX,GAAIZ,aAAgBa,OAAQ,CAC1B,KAAOV,EAAIW,EAAsBC,KAAKf,EAAKgB,SACzCf,EAAKgB,KAAK,CACRL,KAAMA,IACNM,UAAU,EACVC,OAAQhB,EAAEiB,QAId,OAAOpB,EAGT,GAAIqB,MAAMC,QAAQtB,GAQhB,OAJAA,EAAOA,EAAKuB,KAAI,SAAUC,GACxB,OAAOzB,EAAayB,EAAOvB,EAAMC,GAASc,UAGrC,IAAIH,OAAO,MAAQb,EAAKyB,KAAK,KAAO,IAAKnB,GAGlDN,GAAQ,IAAMA,GAAQI,EAAS,GAA+B,MAA1BJ,EAAKA,EAAKU,OAAS,GAAa,IAAM,OACvEgB,QAAQ,QAAS,QACjBA,QAAQ,YAAa,QACrBA,QAAQ,6CAA6C,SAAUC,EAAOC,EAAOC,EAAQC,EAAKC,EAASC,EAAMd,EAAUC,GAClHS,EAAQA,GAAS,GACjBC,EAASA,GAAU,GACnBE,EAAUA,GAAW,SAAWF,EAAS,OACzCX,EAAWA,GAAY,GAEvBjB,EAAKgB,KAAK,CACRL,KAAMkB,EACNZ,WAAYA,EACZC,OAAQA,EAASX,IAGnB,IAAIyB,GACCf,EAAW,GAAKU,GACjB,MACAC,GAAUX,EAAWU,EAAQ,IAAMG,GAClCC,EAAO,WAAaH,EAAS,UAAY,IAC1C,IACAX,EAIJ,OAFAV,GAAeyB,EAAOvB,OAASiB,EAAMjB,OAE9BuB,KAERP,QAAQ,OAAO,SAAUM,EAAMZ,GAG9B,IAFA,IAAIc,EAAMjC,EAAKS,OAERwB,KAAQzB,GAAcR,EAAKiC,GAAKf,OAASC,GAC9CnB,EAAKiC,GAAKf,QAAU,EAGtB,MAAO,UAIX,KAAOhB,EAAIW,EAAsBC,KAAKf,IAAO,CAI3C,IAHA,IAAImC,EAAc,EACdf,EAAQjB,EAAEiB,MAEkB,OAAzBpB,EAAKoC,SAAShB,IACnBe,IAIEA,EAAc,GAAM,KAIpB1B,EAAaE,IAAMV,EAAKS,QAAUT,EAAKQ,EAAaE,GAAGQ,OAAShB,EAAEiB,QACpEnB,EAAKoC,OAAO5B,EAAaE,EAAG,EAAG,CAC7BC,KAAMA,IACNM,UAAU,EACVC,OAAQhB,EAAEiB,QAIdT,KAMF,OAFAX,GAASK,EAAM,IAAiC,MAA1BL,EAAKA,EAAKU,OAAS,GAAa,GAAK,YAEpD,IAAIG,OAAOb,EAAMM,IAtH1B,IAAIQ,EAAwB","file":"js/vendors/path-to-regexp-b7d6324de1f72c8979bd.js","sourcesContent":["/**\n * Expose `pathtoRegexp`.\n */\n\nmodule.exports = pathtoRegexp;\n\n/**\n * Match matching groups in a regular expression.\n */\nvar MATCHING_GROUP_REGEXP = /\\((?!\\?)/g;\n\n/**\n * Normalize the given path string,\n * returning a regular expression.\n *\n * An empty array should be passed,\n * which will contain the placeholder\n * key names. For example \"/user/:id\" will\n * then contain [\"id\"].\n *\n * @param  {String|RegExp|Array} path\n * @param  {Array} keys\n * @param  {Object} options\n * @return {RegExp}\n * @api private\n */\n\nfunction pathtoRegexp(path, keys, options) {\n  options = options || {};\n  keys = keys || [];\n  var strict = options.strict;\n  var end = options.end !== false;\n  var flags = options.sensitive ? '' : 'i';\n  var extraOffset = 0;\n  var keysOffset = keys.length;\n  var i = 0;\n  var name = 0;\n  var m;\n\n  if (path instanceof RegExp) {\n    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {\n      keys.push({\n        name: name++,\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    return path;\n  }\n\n  if (Array.isArray(path)) {\n    // Map array parts into regexps and return their source. We also pass\n    // the same keys and options instance into every generation to get\n    // consistent matching groups before we join the sources together.\n    path = path.map(function (value) {\n      return pathtoRegexp(value, keys, options).source;\n    });\n\n    return new RegExp('(?:' + path.join('|') + ')', flags);\n  }\n\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\n    .replace(/\\/\\(/g, '/(?:')\n    .replace(/([\\/\\.])/g, '\\\\$1')\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {\n      slash = slash || '';\n      format = format || '';\n      capture = capture || '([^\\\\/' + format + ']+?)';\n      optional = optional || '';\n\n      keys.push({\n        name: key,\n        optional: !!optional,\n        offset: offset + extraOffset\n      });\n\n      var result = ''\n        + (optional ? '' : slash)\n        + '(?:'\n        + format + (optional ? slash : '') + capture\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\n        + ')'\n        + optional;\n\n      extraOffset += result.length - match.length;\n\n      return result;\n    })\n    .replace(/\\*/g, function (star, index) {\n      var len = keys.length\n\n      while (len-- > keysOffset && keys[len].offset > index) {\n        keys[len].offset += 3; // Replacement length minus asterisk length.\n      }\n\n      return '(.*)';\n    });\n\n  // This is a workaround for handling unnamed matching groups.\n  while (m = MATCHING_GROUP_REGEXP.exec(path)) {\n    var escapeCount = 0;\n    var index = m.index;\n\n    while (path.charAt(--index) === '\\\\') {\n      escapeCount++;\n    }\n\n    // It's possible to escape the bracket.\n    if (escapeCount % 2 === 1) {\n      continue;\n    }\n\n    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {\n      keys.splice(keysOffset + i, 0, {\n        name: name++, // Unnamed matching groups must be consistently linear.\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    i++;\n  }\n\n  // If the path is non-ending, match until the end or a slash.\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\n\n  return new RegExp(path, flags);\n};\n"],"sourceRoot":""}